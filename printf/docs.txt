- 프로젝트는 C로 작성해야 합니다.

- 프로젝트는 놈에 따라 작성해야 합니다. 보너스 파일/함수가 있는 경우 놈 검사에 포함되며 내부에 놈 오류가 있는 경우 0을 받게 됩니다.

- 정의되지 않은 동작을 제외하고 함수가 예기치 않게 종료(세그먼트 오류, 버스 오류, 더블 프리 등)되어서는 안 됩니다. 이런 일이 발생하면 프로젝트는 작동하지 않는 것으로 간주되어 평가 중에 0점을 받게 됩니다.

- 모든 힙에 할당된 메모리 공간은 필요할 때 적절히 해제되어야 합니다. 어떠한 누수도 용납되지 않습니다.

- 주제에서 요구하는 경우, 소스 파일을 필요한 출력으로 컴파일하는 메이크파일을 -Wall, -Wextra 및 -Werror 플래그와 함께 제출해야 하며, cc를 사용하고, 메이크파일은 리링크되지 않아야 합니다.

- 당신의 메이크 파일에는 $(NAME), all, clean, fclean, re가 포함되어야 합니다.

- 프로젝트에 보너스를 추가하려면 프로젝트의 주요 부분에서 금지된 다양한 헤더, 라이브러리 또는 함수를 모두 추가하는 규칙 보너스를 메이크파일에 포함해야 합니다. 보너스는 주제에서 다른 것을 지정하지 않은 경우 다른 파일 _bonus.{c/h}에 있어야 합니다. 필수 부분과 보너스 부분 평가는 별도로 진행됩니다.

- 프로젝트에서 libft 사용을 허용하는 경우 libft 폴더에 소스 및 관련 메이크파일을 관련 메이크파일이 있는 libft 폴더에 복사해야 합니다. 프로젝트의 메이크파일은 해당 메이크파일을 사용하여 라이브러리를 컴파일한 다음 프로젝트를 컴파일해야 합니다.

- 이 작업은 제출할 필요가 없고 채점되지 않더라도 프로젝트의 테스트 프로그램을 생성하는 것이 좋습니다. 이렇게 하면 자신의 작업과 동료의 작업을 쉽게 테스트할 수 있습니에 제출하세요. git 저장소에 있는 작업만 채점됩니다. 동료 평가 후 ft_putnbr() 및 ft_putstr()만으로는 충분하지 않으므로 Deepthought가 작업을 채점하도록 배정된 경우 3 ft_printf가 수행됩니다. 딥씽킹이 채점하는 동안 작업의 어느 부분에서든 오류가 발생하면 평가가 중지됩니다.다. 이러한 테스트는 방어하는 동안 특히 유용합니다. 실제로 방어하는 동안에는 자신의 시험 및/또는 평가하는 동료의 시험을 자유롭게 사용할 수 있습니다.

- 작업을 할당된 git 리포지토리에 제출하세요. git 저장소에 있는 작업만 채점됩니다. 동료 평가 후 ft_putnbr() 및 ft_putstr()만으로는 충분하지 않으므로 Deepthought가 작업을 채점하도록 배정된 경우 3 ft_printf가 수행됩니다. 딥씽킹이 채점하는 동안 작업의 어느 부분에서든 오류가 발생하면 평가가 중지됩니다.



- libc에서 printf() 함수를 다시 코딩해야 합니다.
ft_printf()의 프로토타입은 다음과 같습니다:
int ft_printf(const char *, ...);

요구 사항은 다음과 같습니다:
- 원래 printf()의 버퍼 관리를 구현하지 마세요.
- 함수는 다음과 같은 변환을 처리해야 합니다. cspdiuxX%
- 함수는 원본 printf()와 비교됩니다.
- 라이브러리를 만들려면 ar 명령을 사용해야 합니다.
libtool 명령을 사용하는 것은 금지되어 있습니다.
- 리포지토리의 루트에 libftprintf.a를 만들어야 합니다.

다음과 같은 변환을 구현해야 합니다:
- %c 단일 문자를 인쇄합니다.
- %s 문자열을 인쇄합니다(일반적인 C 규칙에 정의된 대로).
- %p void * 포인터 인수는 16진수 형식으로 인쇄해야 합니다.
- %d 십진수(기본 10)를 인쇄합니다.
- %i 기본 10의 정수를 인쇄합니다.
- %u 부호 없는 10진수(밑수 10)를 인쇄합니다.
- %x 16진수(베이스 16) 소문자 형식으로 숫자를 인쇄합니다.
- %X 16진수(베이스 16) 대문자 형식으로 숫자를 인쇄합니다.
- %% 백분율 기호를 인쇄합니다.